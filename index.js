require('dotenv').config();
const { Client, GatewayIntentBits, Collection, Partials } = require('discord.js');
const keepAlive = require('./server.js');

// Kh·ªüi t·∫°o client v·ªõi ƒë·∫ßy ƒë·ªß intents c·∫ßn thi·∫øt
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildMembers,
    GatewayIntentBits.DirectMessages,
    GatewayIntentBits.GuildMessageReactions,
    GatewayIntentBits.DirectMessageReactions,
    GatewayIntentBits.GuildPresences
  ],
  partials: [
    Partials.Channel,
    Partials.Message,
    Partials.User,
    Partials.GuildMember,
    Partials.Reaction
  ]
});

// NgƒÉn ch·∫∑n c√°c s·ª± ki·ªán m·∫∑c ƒë·ªãnh
process.on('unhandledRejection', error => {
  console.error('Unhandled promise rejection:', error);
});

client.on('error', error => {
  console.error('Discord client error:', error);
});

client.on('warn', info => {
  console.log('Discord client warning:', info);
});

// Prefix v√† c·∫•u h√¨nh
const CONFIG = {
  prefix: '!',
  maxBossHits: 10,
  bossSpawnInterval: 30 * 60 * 1000, // 30 ph√∫t
};

// Cooldowns v√† collections
const cooldowns = {
  pvp: new Collection(),
  bikip: new Collection(),
  tuluyen: new Collection(),
  haithuoc: new Collection(),
  linhthu: new Collection(),
  bicanh: new Collection(),
  boss: new Collection()
};

const userData = new Collection();

// Th·ªùi gian cooldown (ms)
const COOLDOWNS = {
  pvp: 5 * 60 * 1000,        // 5 ph√∫t
  bikip: 2 * 60 * 60 * 1000, // 2 gi·ªù
  tuluyen: 60 * 60 * 1000,   // 1 gi·ªù
  haithuoc: 30 * 60 * 1000,  // 30 ph√∫t
  linhthu: 24 * 60 * 60 * 1000,  // 24 gi·ªù
  bicanh: 6 * 60 * 60 * 1000,    // 6 gi·ªù
  boss: 0
};

// C·∫£nh gi·ªõi tu ti√™n
const CANH_GIOI = [
  'Ph√†m Nh√¢n',
  'Luy·ªán Kh√≠',
  'Tr√∫c C∆°',
  'Kim ƒêan',
  'Nguy√™n Anh',
  'H√≥a Th·∫ßn',
  'Luy·ªán H∆∞',
  'H·ª£p Th·ªÉ',
  'ƒê·∫°i Th·ª´a',
  'ƒê·ªô Ki·∫øp'
];

// H·ªá th·ªëng linh th√∫
const LINH_THU_TYPES = {
  'H·ªèa K·ª≥ L√¢n': { power: 100, element: 'h·ªèa' },
  'BƒÉng Ph∆∞·ª£ng Ho√†ng': { power: 100, element: 'bƒÉng' },
  'L√¥i Long': { power: 100, element: 'l√¥i' },
  'M·ªôc Quy': { power: 100, element: 'm·ªôc' },
  'Th·ªï Nham Th√∫': { power: 100, element: 'th·ªï' }
};

// H·ªá th·ªëng boss
const bosses = {
  current: null,
  hits: 0,
  maxHits: 10,
  types: [
    'Huy·∫øt Nguy·ªát Ma V∆∞∆°ng',
    'Thi√™n Ngo·∫°i T√† Ti√™n',
    'C·ªï Ti√™n Th√°nh Th√∫'
  ]
};

// Utility functions
function checkCooldown(userId, command) {
  const cooldownTime = COOLDOWNS[command];
  const timestamps = cooldowns[command];
  
  if (timestamps.has(userId)) {
    const expirationTime = timestamps.get(userId) + cooldownTime;
    if (Date.now() < expirationTime) {
      return Math.round((expirationTime - Date.now()) / 1000);
    }
  }
  return 0;
}

function getUserData(userId) {
  if (!userData.has(userId)) {
    userData.set(userId, {
      level: 1,
      exp: 0,
      coins: 100,
      items: [],
      canhGioi: CANH_GIOI[0],
      linhThu: null
    });
  }
  return userData.get(userId);
}

function formatCooldown(seconds) {
  if (seconds <= 0) return '‚úÖ S·∫µn s√†ng';
  
  const hours = Math.floor(seconds / 3600);
  const minutes = Math.floor((seconds % 3600) / 60);
  const remainingSeconds = seconds % 60;
  
  if (hours > 0) return `‚è≥ ${hours}h${minutes}m`;
  if (minutes > 0) return `‚è≥ ${minutes}m${remainingSeconds}s`;
  return `‚è≥ ${remainingSeconds}s`;
}

// Command handlers
const commands = {
  batdau: (message) => {
    const userId = message.author.id;
    if (userData.has(userId)) {
      message.reply('‚ùå Ng∆∞∆°i ƒë√£ ƒëƒÉng k√Ω tu ti√™n r·ªìi! H√£y d√πng !trangthai ƒë·ªÉ xem th√¥ng tin.');
      return;
    }

    userData.set(userId, {
      level: 1,
      exp: 0,
      coins: 100,
      items: [],
      canhGioi: CANH_GIOI[0],
      linhThu: null
    });

    message.reply(`
üéä Ch√†o m·ª´ng ${message.author.username} b∆∞·ªõc v√†o con ƒë∆∞·ªùng tu ti√™n!

üìù **Th√¥ng tin c∆° b·∫£n:**
üî∞ C·∫£nh gi·ªõi: ${CANH_GIOI[0]}
üí∞ Ti·ªÅn: 100
üìä EXP: 0/100

‚ùì D√πng !trogiup ƒë·ªÉ xem h∆∞·ªõng d·∫´n chi ti·∫øt
    `);
  },

  trangthai: (message) => {
    const userId = message.author.id;
    const userData = getUserData(userId);
    
    if (!userData) {
      message.reply('‚ùå Ng∆∞∆°i ch∆∞a b·∫Øt ƒë·∫ßu tu ti√™n! H√£y d√πng !batdau ƒë·ªÉ ƒëƒÉng k√Ω.');
      return;
    }

    const nextLevel = userData.level * 100;
    
    const statusEmbed = `
**üîÆ B·∫£ng Th√¥ng Tin Tu Ti√™n**
üë§ ƒê·∫°o h·ªØu: ${message.author.username}
‚≠ê C·∫£nh gi·ªõi: ${CANH_GIOI[userData.level - 1]}
üìä Tu vi: ${userData.exp}/${nextLevel}
üí∞ Linh th·∫°ch: ${userData.coins}

**‚è≥ Th·ªùi gian ch·ªù:**
‚öîÔ∏è PvP: ${formatCooldown(checkCooldown(userId, 'pvp'))}
üìö H·ªçc b√≠ k√≠p: ${formatCooldown(checkCooldown(userId, 'bikip'))}
üßò Tu luy·ªán: ${formatCooldown(checkCooldown(userId, 'tuluyen'))}
üåø H√°i thu·ªëc: ${formatCooldown(checkCooldown(userId, 'haithuoc'))}
üêâ Thu ph·ª•c: ${formatCooldown(checkCooldown(userId, 'linhthu'))}
üèØ Kh√°m ph√°: ${formatCooldown(checkCooldown(userId, 'bicanh'))}
    `;

    message.reply(statusEmbed);
  },

  tu: (message) => {
    const userId = message.author.id;
    const cooldownTime = checkCooldown(userId, 'tuluyen');
    
    if (cooldownTime > 0) {
      const minutes = Math.floor(cooldownTime / 60);
      const seconds = cooldownTime % 60;
      message.reply(`B·∫°n c·∫ßn ƒë·ª£i ${minutes}p${seconds}s n·ªØa ƒë·ªÉ tu luy·ªán ti·∫øp.`);
      return;
    }

    const userData = getUserData(userId);
    const expGain = Math.floor(Math.random() * 50) + 50;
    userData.exp += expGain;
    
    if (userData.exp >= userData.level * 100) {
      userData.level += 1;
      userData.exp = 0;
      message.reply(`üéä Ch√∫c m·ª´ng! B·∫°n ƒë√£ ƒë·ªôt ph√° l√™n c·∫£nh gi·ªõi ${userData.level}!\nüí™ Tu vi tƒÉng m·∫°nh!`);
    } else {
      message.reply(`‚ö° Tu luy·ªán th√†nh c√¥ng!\nüìä EXP +${expGain}\nüîã EXP hi·ªán t·∫°i: ${userData.exp}/${userData.level * 100}`);
    }

    cooldowns.tuluyen.set(userId, Date.now());
  },

  // ... Th√™m c√°c command handlers kh√°c t∆∞∆°ng t·ª± ...

  trogiup: (message) => {
    const helpText = `
**üìú H∆∞·ªõng D·∫´n Tu Ti√™n**

üéÆ **L·ªánh c∆° b·∫£n:**
!batdau - B·∫Øt ƒë·∫ßu con ƒë∆∞·ªùng tu ti√™n
!trangthai - Xem th√¥ng tin tu vi
!trogiup - Xem h∆∞·ªõng d·∫´n

üßò **Tu luy·ªán & Ph√°t tri·ªÉn:**
!tu - Tu luy·ªán tƒÉng exp (1h/l·∫ßn)
!bikip - H·ªçc b√≠ k√≠p (2h/l·∫ßn)
!haithuoc - H√°i thu·ªëc (30p/l·∫ßn)

üåç **Th√°m hi·ªÉm:**
!linhthu - Thu ph·ª•c linh th√∫ (24h/l·∫ßn)
!bicanh - Kh√°m ph√° b√≠ c·∫£nh (6h/l·∫ßn)

‚öîÔ∏è **Chi·∫øn ƒë·∫•u:**
!pvp @ng∆∞·ªùi_ch∆°i - Lu·∫≠n b√†n v·ªõi ƒë·∫°o h·ªØu (5p/l·∫ßn)
!boss - Xem th√¥ng tin boss
!danhboss - T·∫•n c√¥ng boss (3 l·∫ßn/boss)

üêæ **Linh th√∫:**
!thonphe - Th√¥n ph·ªá linh th√∫ kh√°c
!thongthu - Xem th√¥ng tin linh th√∫

üí° **L∆∞u √Ω:**
- Boss xu·∫•t hi·ªán m·ªói 30 ph√∫t
- M·ªói ng∆∞·ªùi ƒë∆∞·ª£c ƒë√°nh boss 3 l·∫ßn
- Boss c·∫ßn 10 l·∫ßn t·∫•n c√¥ng ƒë·ªÉ h·∫° g·ª•c
- Ng∆∞·ªùi k·∫øt li·ªÖu boss nh·∫≠n ph·∫ßn th∆∞·ªüng ƒë·∫∑c bi·ªát
    `;
    message.reply(helpText);
  }
};

// Event handlers
client.once('ready', () => {
  console.log(`ƒêƒÉng nh·∫≠p th√†nh c√¥ng: ${client.user.tag}!`);
  setInterval(spawnBoss, CONFIG.bossSpawnInterval);
  spawnBoss();
});

client.on('messageCreate', async (message) => {
  try {
    // B·ªè qua tin nh·∫Øn t·ª´ bot
    if (message.author.bot) return;

    // B·ªè qua tin nh·∫Øn kh√¥ng b·∫Øt ƒë·∫ßu b·∫±ng prefix
    if (!message.content.startsWith(CONFIG.prefix)) return;

    // Parse command v√† arguments
    const args = message.content.slice(CONFIG.prefix.length).trim().split(/ +/);
    const command = args.shift().toLowerCase();

    // Ch·ªâ th·ª±c thi c√°c l·ªánh ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a
    if (commands[command]) {
      try {
        await commands[command](message, args);
      } catch (error) {
        console.error(`Error executing command ${command}:`, error);
        message.reply('‚ùå C√≥ l·ªói x·∫£y ra khi th·ª±c hi·ªán l·ªánh.').catch(console.error);
      }
    }
    // Kh√¥ng l√†m g√¨ c·∫£ n·∫øu l·ªánh kh√¥ng t·ªìn t·∫°i
  } catch (error) {
    console.error('Error in messageCreate event:', error);
  }
});

// Th√™m event handler cho interactionCreate
client.on('interactionCreate', async (interaction) => {
  try {
    if (!interaction.isCommand()) return;
    // B·ªè qua t·∫•t c·∫£ c√°c interaction commands
    return;
  } catch (error) {
    console.error('Error in interactionCreate event:', error);
  }
});

// Boss system
function spawnBoss() {
  if (!bosses.current) {
    bosses.current = bosses.types[Math.floor(Math.random() * bosses.types.length)];
    bosses.hits = 0;
    client.guilds.cache.forEach(guild => {
      const channel = guild.channels.cache.find(ch => 
        ch.name.includes('boss') || ch.name.includes('general') || ch.name.includes('chung')
      );
      if (channel) {
        channel.send(`üî• BOSS ${bosses.current} ƒë√£ xu·∫•t hi·ªán! H√£y s·ª≠ d·ª•ng !danhboss ƒë·ªÉ t·∫•n c√¥ng!`);
      }
    });
  }
}

// Start bot
keepAlive();
client.login(process.env.TOKEN); 
